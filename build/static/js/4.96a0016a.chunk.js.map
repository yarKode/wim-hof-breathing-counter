{"version":3,"sources":["Components/Spinner.jsx","Components/Heading.jsx","../../index.js","Components/Contact/ContactForm.jsx","Components/Contact/ContactList.jsx","../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/methods/send/send.js","Components/Contact/Contact.jsx"],"names":["Spinner","className","Heading","title","EMAIL_REGEX","test","isEmailMaybe","ContactForm","formData","valueChangeHandler","submitHandler","err","style","color","fontSize","textAlign","letterSpacing","htmlFor","autoComplete","onChange","value","name","type","id","email","required","msg","cols","rows","onClick","ContactList","store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","httpResponse","instance","Constructor","TypeError","this","status","text","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","target","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","Contact","useState","setFormData","formStatus","setFormStatus","prev","e","preventDefault","trim","toSend","from_name","to_name","message","reply_to","process","then","response","catch","console","error"],"mappings":"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","file":"static/js/4.96a0016a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Spinner() {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Heading({ title }) {\n  return <h1 className=\"page-header\">{title}</h1>;\n}\n","/*\n * copied from the angular.js project:\n * https://github.com/angular/angular.js/blob/fa79eaa816aa27c6d1b3c084b8372f9c17c8d5a3/src/ng/directive/input.js#L27\n * The main purpose of this library is to isolate this regex for testing and reuse\n * Thanks angular people!\n*/\nconst EMAIL_REGEX = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i\n\nisEmailMaybe.regex = EMAIL_REGEX\nexport default isEmailMaybe\n\nfunction isEmailMaybe(email) {\n  return EMAIL_REGEX.test(email)\n}\n","import React from \"react\";\n\nexport default function ContactForm({\n  formData,\n  valueChangeHandler,\n  submitHandler,\n}) {\n  return (\n    <div className=\"form-placeholder\">\n      {formData.err && (\n        <p\n          style={{\n            color: \"red\",\n            fontSize: \"1rem\",\n            textAlign: \"center\",\n            letterSpacing: \"normal\",\n          }}\n        >\n          {`${formData.err}`}\n        </p>\n      )}\n      <form className=\"contact-form\">\n        <ul className=\"contact-form-list\">\n          <li>\n            <label htmlFor=\"name\">Name:</label>\n            <input\n              autoComplete=\"off\"\n              onChange={valueChangeHandler}\n              value={formData.name}\n              type=\"text\"\n              id=\"name\"\n              name=\"user_name\"\n            />\n          </li>\n          <li>\n            <label htmlFor=\"mail\">E-mail:</label>\n            <input\n              autoComplete=\"off\"\n              onChange={valueChangeHandler}\n              value={formData.email}\n              type=\"email\"\n              id=\"mail\"\n              name=\"user_mail\"\n              required\n            />\n          </li>\n          <li>\n            <label htmlFor=\"msg\">Message:</label>\n            <textarea\n              onChange={valueChangeHandler}\n              value={formData.msg}\n              id=\"msg\"\n              name=\"user_message\"\n              cols=\"2\"\n              rows=\"6\"\n              required\n            ></textarea>\n          </li>\n          <li>\n            <button onClick={submitHandler} className=\"link-btn\" type=\"submit\">\n              Send your message\n            </button>\n          </li>\n        </ul>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ContactList() {\n  return (\n    <div className=\"contacts-placeholder\">\n      <p>telegram@lsdlsdk.com</p>\n      <p>david.johnson@gmail.com</p>\n      <p>@yarkode_twitter</p>\n    </div>\n  );\n}\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import React, { useState } from \"react\";\nimport Heading from \"../Heading\";\n\nimport ContactForm from \"./ContactForm\";\nimport ContactList from \"./ContactList\";\n\nimport { send } from \"emailjs-com\";\n\nimport isEmailMaybe from \"is-email-maybe\";\nimport Spinner from \"../Spinner\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"Slavik\",\n    email: \"slavik.buravik@gmail..ccom\",\n    msg: \"\",\n    err: \"\",\n  });\n\n  const [formStatus, setFormStatus] = useState(\"idle\");\n\n  function valueChangeHandler({ target: { name, value } }) {\n    setFormData((prev) => ({\n      ...prev,\n      err: \"\",\n    }));\n    if (name === \"user_name\") setFormData((prev) => ({ ...prev, name: value }));\n    if (name === \"user_mail\")\n      setFormData((prev) => ({ ...prev, email: value }));\n    if (name === \"user_message\")\n      setFormData((prev) => ({ ...prev, msg: value }));\n  }\n\n  function submitHandler(e) {\n    if (!e) return;\n    e.preventDefault();\n    if (formData.email.trim() === \"\" || formData.msg.trim() === \"\") {\n      setFormData((prev) => ({\n        ...prev,\n        err: \"Email and Message Fields can't be empty\",\n      }));\n      return;\n    }\n\n    if (!isEmailMaybe(formData.email.trim())) {\n      setFormData((prev) => ({\n        ...prev,\n        err: \"Email is not valid\",\n      }));\n      return;\n    }\n\n    const toSend = {\n      from_name: formData.name,\n      to_name: \"to_name\",\n      message: formData.msg,\n      reply_to: formData.email,\n    };\n\n    setFormStatus(\"proccessing\");\n    send(\n      process.env.REACT_APP_EMAILJS_SERVICE_ID,\n      process.env.REACT_APP_EMAILJS_TEMPLATE_ID,\n      toSend,\n      process.env.REACT_APP_EMAILJS_USER_ID\n    )\n      .then((response) => {\n        setFormStatus(\"succes\");\n      })\n      .catch((err) => {\n        console.error(\"FAILED...\", err);\n        setFormStatus(\"failed\");\n      });\n\n    setFormData((prev) => ({\n      ...prev,\n      name: \"\",\n      email: \"\",\n      msg: \"\",\n      err: \"\",\n    }));\n  }\n\n  if (formStatus === \"succes\") {\n    return (\n      <div className=\"page-container\">\n        <h1>Email sent successfully!</h1>\n      </div>\n    );\n  }\n\n  if (formStatus === \"proccessing\") {\n    return (\n      <div className=\"page-container\">\n        <h1>Sending...</h1>\n        <Spinner />\n      </div>\n    );\n  }\n  if (formStatus === \"failed\") {\n    return (\n      <div className=\"page-container\">\n        <h1>Sending failed 😿</h1>\n      </div>\n    );\n  }\n  if (formStatus === \"idle\")\n    return (\n      <div className=\"page-container\">\n        <Heading title=\"Contact Me\" />\n        <div className=\"contact-block\">\n          <ContactForm\n            formData={formData}\n            valueChangeHandler={valueChangeHandler}\n            submitHandler={submitHandler}\n          />\n          <div className=\"vertical-spread-line\"></div>\n          <ContactList />\n        </div>\n      </div>\n    );\n}\n"],"sourceRoot":""}